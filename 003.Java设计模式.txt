Java设计模式
============================================================
【分类】
创建型(5)：工厂、抽象工厂、单例、建造者、原型模式。创建型模式，就是创建对象的模式，抽象了实例化的过程。
关注的是对象的创建，创建型模式将创建对象的过程进行了抽象，也可以理解为将创建对象的过程进行了封装，
作为客户程序仅仅需要去使用对象，而不再关心创建对象过程中的逻辑。
结构型(7)：适配器、装饰器、代理、外观、桥接、组合、享元模式。
结构型模式是为解决怎样组装现有的类，设计他们的交互方式，从而达到实现一定的功能的目的。
结构型模式包容了对很多问题的解决。例如：扩展性（外观、组合、代理、装饰）封装性（适配器，桥接）。
行为型(11)：策略、模板方法、观察者、迭代、责任链、命令、备忘录、状态、访问者、中介、解释器。
行为型模式涉及到算法和对象间职责的分配，行为模式描述了对象和类的模式，以及它们之间的通信模式，
行为型模式刻划了在程序运行时难以跟踪的复杂的控制流可分为行为类模式和行为对象模式，
1.行为模式使用继承机制在类间分派行为2.行为对象模式使用对象聚合来分配行为。
一些行为对象模式描述了一组对等的对象怎样相互协作以完成其中任何一个对象都无法单独完成的任务。

【总原则】
开闭原则（Open Close Principle），开闭原则就是说对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，而是要扩展原有代码，实现一个热插拔的效果。
所以一句话概括就是：为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类等。

1、工厂模式――一个工厂建造多个同类产品。
背景：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。
MailSender――MsgSender扩展的最好方式。
如异构场景，VMWare、KVM、Xen、Hyper-V都有创建虚拟机接口。
实现：编写两个类、每个类都有Send方法
问题：代码冗余、有联系的类看起来毫不相关
演进：定义Sender接口、定义工厂类，MailSender、MsgSender分别实现Sender接口，抽象工厂添加两个类创建的方法。
抽象工厂实现可以有几种方式（通过forName方式传递类名称、定义两个方法分别构造MailSender、MsgSender对象）。
问题：新增同类对象需要修改工厂类。
演进：抽象工厂定义成接口，几个类实现抽象工厂接口。
效果：新增同类，两步走，实现Sender接口、实现Factory接口。仅需要添加代码，不需要修改代码。
消费者不需要知道产品生产细节，告诉工厂生产。利于大规模软件开发分工合作。
实例：虚拟化异构、数据库连接等。
参考：http://blog.csdn.net/longyulu/article/details/9159589

2、抽象工厂――多个一类工厂建造多个同类产品。
问题：针对工厂模式，多个工厂都可以创建对象，如既可以使用移动服务发送短信、也可以使用联通服务发送短信。
则需要新增工厂类，且每个类之间部分类有联系。可以考虑进一步抽象。
实现；工厂不定义成接口，而是定义成抽象类。其他各类工厂继承抽象工厂，实现多家厂商多个产品创建。
参考：http://blog.csdn.net/longyulu/article/details/9159589

3、单例模式――最多只能创建唯一一个产品，四种方法实现。
背景；任务管理器仅需要一个实例。
实现：构造函数声明为private，禁止外部调用new创建新的对象，外界需要访问实例、声明静态方法返回实例，静态方法只能访问静态实例、所以实例声明为静态实例。
静态方法判断实例对象是否为null，不为null则new对象返回。
问题：这是基本的实现方法，但是也是有问题的，多线程环境下不安全。
饿汉式：私有静态实例在类中直接初始化，类加载的时候创建实例，多线程环境下类的加载有加锁机制，也可以保证全局唯一性。
问题：如果对象创建消耗资源较多，耗时较长，这种方式会造成软件启动很慢，所以产生了另外一种思路，延迟加载，即懒汉式方法。
懒汉式-方案一：getInstance方法加锁
问题：加锁粗粒度，每个线程调用getInstance都需要先申请锁，实际上是没有必要的。
懒汉式-方案二：锁住创建对象代码，但是有问题，双重检查锁定，还是有问题，new不是线程安全的，JVM做了重排序，也会导致线程不安全，
解决方法有两种，一是对实例对象使用violate关键字，jvm不会做重排序的优化。
另一种方法， 定义内部静态类HolderClass，在该内部类中创建单例对象，再将该单例对象通过getInstance()方法返回给外部使用。
这样，我们既可以实现延迟加载，又可以保证线程安全，不影响系统性能，不失为一种最好的Java语言单例模式实现方式。
参考：http://blog.csdn.net/lujiancs/article/details/8278843

4、创建者模式――复杂对象不会建，让设计师帮忙干活。
背景：多属性类，各种类型构造函数，怎么实现比较简单？链式方法创建对象是不是很酷。
实现：产品A的构造函数参数是Builder，A提供createBuilder方法，A与Builder有相同的属性，Builder的set方法返回自身，createA方法调用A的构造函数。
解读：A生成建筑师，建筑师添砖加瓦，完了之后创建A。A创建了建筑师，建筑师进而创建了A。
参考：http://kanpiaoxue.iteye.com/blog/2091538

5、原型模式――复制、克隆新对象。
本质：将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象
浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。
浅复制可以通过实现Cloneable实现，想要实现深复制，被引用的对象也要实现Cloneable接口。
深复制：另外一种深复制实现方法，是实现Serializable接口，通过反序列化方式得到对象的深拷贝。
参考：http://canofy.iteye.com/blog/258790
http://blog.csdn.net/accp_fangjian/article/details/2423252
http://www.cnblogs.com/zhuocheng/archive/2011/12/12/2285153.html

6、适配器模式――想使用一个已存在的类，但是该类不符合接口需求，接口需要扩展。或者缺省适配器场景。可以持有类对象。
继承方式――public class Adapter extends Source implements Targetable。
委让方式――基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。
public class Wrapper implements Targetable {  
	private Source source;
	xxx
}
优点：更好的复用性，系统需要使用现有的类，而此类的接口不符合系统的需要。那么通过适配器模式就可以让这些功能得到更好的复用。
缺点：过多的使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，
一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。
缺省适配器：缺省适配(Default Adapter)模式为一个接口提供缺省实现，这样子类型可以从这个缺省实现进行扩展，而不必从原有接口进行扩展。
实现：public abstract class Adapter implements Targetable，JDK的很多类库都使用到了这种模式。
当不希望实现一个接口中所有的方法时，可以创建一个抽象类Wrapper，实现所有方法，我们写别的类的时候，继承抽象类即可。
参考：http://www.osblog.net/blog/421.html
http://blog.csdn.net/longyulu/article/details/9159589

7、装饰器模式――保持接口，增强功能，即动态地为对象添加一些额外的功能。持有类对象。
实现：装饰模式就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例。
一般装饰器设计为多层嵌套实现，装饰器调用过程如下：
InterfaceA a = new A();
InterfaceA d = new DecoratorB(new Decorator(a));
d.method();
参考：http://blog.csdn.net/longyulu/article/details/9159589
http://blog.csdn.net/u011494050/article/details/44202615

8、代理模式――客户端不能直接使用A方法，通过中介进行调用。持有类对象。
实现：与装饰器雷同，但是主要区别在于，代理模式持有的实例是在不是通过被装饰类初始化的，二是new初始化的。
代理模式调用过程如下：
InterfaceA a = new Proxy();
a.method();
参考：http://blog.csdn.net/longyulu/article/details/9159589

9、外观模式――定义更高层次的接口，如子系统更容易使用，本质就是控制面板，简化操作。持有多个类对象。
实现：外观类包持有子系统中各个接口的对象，并且利用组合将子系统的所有接口来包含起来。
参考：http://blog.csdn.net/longyulu/article/details/9159589
http://computerdragon.blog.51cto.com/6235984/1165985

10、桥接模式――接口实现与接口调用解耦，调用可以在各种实现之间切换。持有类对象。
实现：接口实现独立，桥类持有接口实例，可以动态设置具体的接口。
桥接模式调用过程如下：
Interface intfA = new InterfaceA();
bridge.setSource(intfA);  
bridge.method();
参考：http://blog.csdn.net/longyulu/article/details/9159589

11、组合模式――分级数据结构的实现。持有子节点类对象。
实现：父节点持有子节点的对象实例。
参考：http://blog.csdn.net/longyulu/article/details/9159589
http://alaric.iteye.com/blog/1910919

12、享元模式――享元模式的主要目的是实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。
实现：Flyweight factory负责维护一个对象存储池（Flyweight Pool）来存放内部状态的对象。
参考：http://www.cnblogs.com/java-my-life/archive/2012/04/26/2468499.html
http://blog.csdn.net/jason0539/article/details/22908915

13、策略模式――策略模式不但是继承的代替方案而且能很好地解决if else问题。
实现：与桥接模式雷同。定义策略接口，实现不同策略，环境角色持有策略接口对象实例，调用策略接口方法。
调用：CalcPriceContext context = new CalcPriceContext(new OrdinaryMemberStrategy());
finalPrice = context.calculationPrice(price);
参考：http://yangguangfu.iteye.com/blog/815107
http://blog.chinaunix.net/uid-29140694-id-4102757.html

14、模板方法模式――与策略模式雷同，但是使用抽象类与继承实现。
实现：模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。
参考：http://www.cnblogs.com/java-my-life/archive/2012/05/14/2495235.html

15、观察者模式――主类调用观察者的方法
本质：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。
实现：主类持有观察者列表类对象，并负责调用观察者接口方法，多个观察者实现观察者接口。
参考：http://blog.csdn.net/longyulu/article/details/9159589

16、迭代器模式――自己定义了一种数据结构，就可以让它实现Iterable接口，用迭代器的方式来遍历这种自定义数据结构
实现：在我们平常的开发过程中，可能经常会用到java为我们封装好的容器迭代器的遍历方式，比如遍历ArrayList我们可以用for循环遍历，
也可以用Iterator的遍历。iterator()是Iterable接口所包含的方法，Collection接口继承了Iterable接口，
所以所有实现Collection接口的容器都可以直接使用迭代器的方式来遍历。由于java已经为我们对容器对象做了很好的封装，我们平时其实很少会自己实现迭代器模式。
参考：http://blog.chinaunix.net/uid-29140694-id-4115165.html

17、责任链模式――多个对象链式处理和加工
实现：多个对象，每个对象持有对下一个对象的引用，每个对象定义自己的加工处理方法。引用持有与加工处理可以通过不同的接口和抽象类进行解耦。
参考：http://blog.csdn.net/longyulu/article/details/9159589

18、命令模式――指令请求与执行解耦
实现：定义CMD接口，MyCMD实现CMD，MyCMD持有士兵示例，调用士兵方法实现CMD接口方法。司令持有MyCMD实例，发出命令。
参考：http://blog.csdn.net/longyulu/article/details/9159589

19、备忘录模式――备份恢复
实现：假设有原始类A，A中有各种属性，A可以决定需要备份的属性，备忘录类B是用来存储A的一些内部状态，
类C就是一个用来存储备忘录的，且只能存储，不能修改等操作。
参考：http://blog.csdn.net/longyulu/article/details/9159589

20、状态模式――当对象的状态改变时，同时改变其行为
实现：State state = new State();  
Context context = new Context(state);  
state.setValue("state1");  
context.method();  
参考：http://blog.csdn.net/longyulu/article/details/9159589

21、访问者模式――把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。意义不大。
22、中介模式――中介集中管理类与类之间的关系。
23、解释器模式

